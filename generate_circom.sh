#!/bin/bash

#!/bin/bash

# Function to generate Circom code with hardcoded sine and cosine values
generate_code() {
    # Header for the Circom template
    echo "pragma circom 2.1.6;
// NOTE: DO NOT EDIT. THIS CODE WAS GENERATED BY generate_circom.sh
// NOTE: decimals = 4, so the values are multiplied by 10000

function returnCosSin(isSin) {
  var cos[360];
  var sin[360];
      "

    # Loop to generate sine and cosine values for each degree
    for i in {0..359}
    do
        # Calculating sine and cosine values using bc
        cos_value=$(echo "c($i*a(1)/180)*10000" | bc -l | awk '{printf "%d\n", $0}')
        sin_value=$(echo "s($i*a(1)/180)*10000" | bc -l | awk '{printf "%d\n", $0}')
        # Printing the hardcoded values in Circom format
        echo "  cos[$i] = ${cos_value};"
        echo "  sin[$i] = ${sin_value};"
    done

    # Footer for the Circom template
    echo "
  if (isSin == 1) {
    return sin;
  } else {
    return cos;
  }
}"
}

# Call the function and save the output to a file
generate_code > circuits/hardcodedSinCos.circom

echo "Circom code generated in hardcodedSinCos.circom"


# # Function to generate Circom code with hardcoded sine and cosine values
# generate_cos_code() {
#     # Header for the Circom template
#     echo "template HardcodedCos() {
#   var decimals = 4;
#   signal input in;
#   signal output out;
#   var cos[360];
#       "

#     # Loop to generate sine and cosine values for each degree
#     for i in {0..359}
#     do
#         # Calculating sine and cosine values using bc
#         cos_value=$(echo "c($i*a(1)/180)*10000" | bc -l | awk '{printf "%d\n", $0}')
#         # Printing the hardcoded values in Circom format
#         echo "  cos[$i] = ${cos_value};"
#     done

#     # Footer for the Circom template
#     echo "
#   out <== cos[in];
# }"
# }

# # Function to generate Circom code with hardcoded sine and cosine values
# generate_sin_code() {
#     # Header for the Circom template
#     echo "template HardcodedSin() {
#   var decimals = 4;
#   signal input in;
#   signal output out;
#   var sin[360];
#       "

#     # Loop to generate sine values for each degree
#     for i in {0..359}
#     do
#         # Calculating sine values using bc
#         sin_value=$(echo "s($i*a(1)/180)*10000" | bc -l | awk '{printf "%d\n", $0}')
#         # Printing the hardcoded values in Circom format
#         echo "  cos[$i] = ${sin_value};"
#     done

#     # Footer for the Circom template
#     echo "
#   out <== sin[in];
# }"
# }

# # Call the function and save the output to a file
# generate_cos_code > circuits/hardcodedCos.circom
# generate_sin_code > circuits/hardcodedSin.circom

# echo "Circom code generated in hardcodedSin.circom and hardcodedCos.circom"
